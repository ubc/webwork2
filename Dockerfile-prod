FROM ubuntu:20.04

ENV WEBWORK_URL /webwork2
ENV WEBWORK_ROOT_URL http://localhost
ENV WEBWORK_DB_HOST db
ENV WEBWORK_DB_PORT 3306
ENV WEBWORK_DB_NAME webwork
ENV WEBWORK_DB_DSN DBI:mysql:${WEBWORK_DB_NAME}:${WEBWORK_DB_HOST}:${WEBWORK_DB_PORT}
ENV WEBWORK_DB_USER webworkWrite
ENV WEBWORK_DB_PASSWORD passwordRW
ENV WEBWORK_SMTP_SERVER localhost
ENV WEBWORK_SMTP_SENDER webwork@example.com
ENV WEBWORK_TIMEZONE America/New_York
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
# temporary state file location. This might be changed to /run in Wheezy+1
ENV APACHE_PID_FILE /var/run/apache2/apache2.pid
ENV APACHE_RUN_DIR /var/run/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
# Only /var/log/apache2 is handled by /etc/logrotate.d/apache2.
ENV APACHE_LOG_DIR /var/log/apache2
ENV APP_ROOT /opt/webwork
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true
ENV WEBWORK_ROOT $APP_ROOT/webwork2
ENV PG_ROOT $APP_ROOT/pg
ENV R_HOST r
ENV DEV 0

# ==================================================================

# Phase 3 - Ubuntu 18.04 base image + required packages

# Packages changes/added for ubuntu 18.04:

# For ubuntu 18.04 libemail-address-xs-perl installed from Ubuntu, for 16.04 it would be installed using cpamn
#
#    texlive-generic-recommended # For ubuntu 16.04 - contains path.sty
#    texlive-plain-generic       # For ubuntu 18.04 - contains path.sty

# Do NOT include "apt-get -y upgrade"
# see: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/

RUN apt-get update \
    && apt-get install -y --no-install-recommends --no-install-suggests \
       apache2 \
       curl \
       dvipng \
       gcc \
       libapache2-request-perl \
       libcrypt-ssleay-perl \
       libdatetime-perl \
       libdancer-perl \
       libdancer-plugin-database-perl \
       libdbd-mysql-perl \
       libemail-address-xs-perl \
       libexception-class-perl \
       libextutils-xsbuilder-perl \
       libfile-find-rule-perl-perl \
       libgd-perl \
       libhtml-scrubber-perl \
       libjson-perl \
       liblocale-maketext-lexicon-perl \
       libmail-sender-perl \
       libmime-tools-perl \
       libnet-ip-perl \
       libnet-ldap-perl \
       libnet-oauth-perl \
       libossp-uuid-perl \
       libpadwalker-perl \
       libpath-class-perl \
       libphp-serialization-perl \
       libxml-simple-perl \
       libsoap-lite-perl \
       libsql-abstract-perl \
       libstring-shellquote-perl \
       libtemplate-perl \
       libtext-csv-perl \
       libtimedate-perl \
       libuuid-tiny-perl \
       libxml-parser-perl \
       libxml-writer-perl \
       libxmlrpc-lite-perl \
       libapache2-reload-perl \
       cpanminus \
       libxml-parser-easytree-perl \
       libiterator-perl \
       libiterator-util-perl \
       libpod-wsdl-perl \
       libtest-xml-perl \
       libmodule-build-perl \
       libxml-semanticdiff-perl \
       libxml-xpath-perl \
       libpath-tiny-perl \
       libarray-utils-perl \
       libhtml-template-perl \
       libtest-pod-perl \
       libemail-sender-perl \
       libmail-sender-perl \
       libmodule-pluggable-perl \
       libemail-date-format-perl \
       libcapture-tiny-perl \
       libthrowable-perl \
       libdata-dump-perl \
       libfile-sharedir-install-perl \
       libclass-tiny-perl \
       libtest-requires-perl \
       libtest-mockobject-perl \
       libtest-warn-perl \
       libsub-uplevel-perl \
       libtest-exception-perl \
       libuniversal-can-perl \
       libuniversal-isa-perl \
       libtest-fatal-perl \
       libjson-xs-perl \
       libmoox-options-perl \
       libnet-https-nb-perl \
       libhttp-async-perl \
       libmoose-perl \
       make \
       netpbm \
       preview-latex-style \
       texlive \
       texlive-latex-extra \
       texlive-plain-generic \
       texlive-xetex \
       texlive-latex-recommended \
       texlive-lang-other \
       texlive-lang-arabic \
       libc6-dev \
       git \
       mariadb-client \
       tzdata \
       apt-utils \
       locales \
       debconf-utils \
       ssl-cert \
       ca-certificates \
       culmus \
       fonts-linuxlibertine \
       lmodern \
       zip \
       jq \
       unixodbc \
       libapache2-mod-shib \
       gettext \
    && apt-get clean \
    && rm -fr /var/lib/apt/lists/* ./cpanm /root/.cpanm /tmp/*

# Developers may want to add additional packages inside the image
# such as: telnet vimvim mc file

# ==================================================================

# Phase 4 - Install webwork2, pg, MathJaX which were downloaded to /opt/base/ in phase 1
#   Option: Install the OPL in the image also (about 850 MB)

RUN mkdir -p $APP_ROOT/courses $APP_ROOT/libraries $APP_ROOT $APP_ROOT/webwork2

COPY VERSION /tmp

RUN WEBWORK_VERSION=`cat /tmp/VERSION|sed -n 's/.*\([0-9]\.[0-9]*\)'\'';/\1/p'` \
    && curl -fSL https://github.com/openwebwork/pg/archive/PG-${WEBWORK_VERSION}.tar.gz -o /tmp/PG-${WEBWORK_VERSION}.tar.gz \
    && tar xzf /tmp/PG-${WEBWORK_VERSION}.tar.gz \
    && mv pg-PG-${WEBWORK_VERSION} $APP_ROOT/pg \
    && rm /tmp/PG-${WEBWORK_VERSION}.tar.gz \
    && curl -fSL https://github.com/openwebwork/webwork-open-problem-library/archive/master.tar.gz -o /tmp/opl.tar.gz \
    && tar xzf /tmp/opl.tar.gz \
    && mv webwork-open-problem-library-master $APP_ROOT/libraries/webwork-open-problem-library \
    && rm /tmp/opl.tar.gz \
    && curl -fSL https://github.com/mathjax/MathJax/archive/legacy-v2.tar.gz -o /tmp/mathjax.tar.gz \
    && tar xzf /tmp/mathjax.tar.gz \
    && mv MathJax-legacy-v2 $APP_ROOT/MathJax \
    && rm /tmp/mathjax.tar.gz \
    && rm /tmp/VERSION
    #curl -fSL https://github.com/openwebwork/webwork2/archive/WeBWorK-${WEBWORK_VERSION}.tar.gz -o /tmp/WeBWorK-${WEBWORK_VERSION}.tar.gz \
    #&& tar xzf /tmp/WeBWorK-${WEBWORK_VERSION}.tar.gz \
    #&& mv webwork2-WeBWorK-${WEBWORK_VERSION} $APP_ROOT/webwork2 \
    #&& rm /tmp/WeBWorK-${WEBWORK_VERSION}.tar.gz \

RUN echo "PATH=$PATH:$APP_ROOT/webwork2/bin" >> /root/.bashrc

COPY . $APP_ROOT/webwork2


# ==================================================================

# Phase 5 - some configuration work

# 1. Setup PATH.
# 2. Compiles color.c in the copy INSIDE the image, will also be done in docker-entrypoint.sh for externally mounted locations.
# 3. Some chown/chmod for material INSIDE the image.
# 4. Build some standard locales.
# 5. Set the default system timezone to be UTC.

RUN echo "PATH=$PATH:$APP_ROOT/webwork2/bin" >> /root/.bashrc \
    && cd $APP_ROOT/pg/lib/chromatic && gcc color.c -o color  \
    && cd $APP_ROOT/webwork2/ \
      && chown www-data -R DATA ../courses  htdocs/applets logs tmp htdocs/tmp $APP_ROOT/pg/lib/chromatic \
      && chmod -R u+w DATA ../courses  htdocs/applets logs tmp htdocs/tmp $APP_ROOT/pg/lib/chromatic   \
    && echo "en_US ISO-8859-1\nen_US.UTF-8 UTF-8" > /etc/locale.gen \
      && /usr/sbin/locale-gen \
      && echo "locales locales/default_environment_locale select en_US.UTF-8\ndebconf debconf/frontend select Noninteractive" > /tmp/preseed.txt \
      && debconf-set-selections /tmp/preseed.txt \
    && rm /etc/localtime /etc/timezone && echo "Etc/UTC" > /etc/timezone \
      &&   dpkg-reconfigure -f noninteractive tzdata

# These lines were moved into docker-entrypoint.sh so the bind mount of courses will be available
#RUN cd $APP_ROOT/webwork2/courses.dist \
#    && cp *.lst $APP_ROOT/courses/ \
#    && cp -R modelCourse $APP_ROOT/courses/

# ==================================================================

# Phase 6 - install additional Perl modules from CPAN (not packaged for Ubuntu or outdated in Ubuntu)

RUN cpanm install Statistics::R::IO App::Genpass \
    && rm -fr ./cpanm /root/.cpanm /tmp/*

# Now installed from Ubuntu packages:
#     XML::Parser::EasyTree Iterator Iterator::Util Pod::WSDL Array::Utils HTML::Template Mail::Sender Email::Sender::Simple Data::Dump
# For Ubuntu 16.04 would also need:
#     Email::Address::XS

# ==================================================================

# Phase 7 - setup apache

# Note we always create the /etc/ssl/local directory in case it will be needed, as
# the SSL config can also be done via a modified docker-entrypoint.sh script.

# Always provide the dummy default-ssl.conf file:
COPY docker-config/ssl/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf

# However SSL will only be enabled at container startup via docker-entrypoint.sh.

RUN cd $APP_ROOT/webwork2/conf \
    && cp webwork.apache2.4-config.dist webwork.apache2.4-config \
    && cp $APP_ROOT/webwork2/conf/webwork.apache2.4-config /etc/apache2/conf-enabled/webwork.conf \
    && a2dismod mpm_event \
    && a2enmod mpm_prefork \
    && sed -i -e 's/Timeout 300/Timeout 1200/' /etc/apache2/apache2.conf \
    && sed -i -e 's/MaxRequestWorkers     150/MaxRequestWorkers     20/' \
        -e 's/MaxConnectionsPerChild   0/MaxConnectionsPerChild   100/' \
        /etc/apache2/mods-available/mpm_prefork.conf \
    && cp $APP_ROOT/webwork2/htdocs/favicon.ico /var/www/html \
    && mkdir -p $APACHE_RUN_DIR $APACHE_LOCK_DIR $APACHE_LOG_DIR \
    && mkdir /etc/ssl/local  \
    && a2enmod rewrite \
    && sed -i -e 's/^<Perl>$/\
      PerlPassEnv WEBWORK_URL\n\
      PerlPassEnv WEBWORK_ROOT_URL\n\
      PerlPassEnv WEBWORK_DB_DSN\n\
      PerlPassEnv WEBWORK_DB_USER\n\
      PerlPassEnv WEBWORK_DB_PASSWORD\n\
      PerlPassEnv WEBWORK_SMTP_SERVER\n\
      PerlPassEnv WEBWORK_SMTP_SENDER\n\
      PerlPassEnv WEBWORK_TIMEZONE\n\
      \n<Perl>/' /etc/apache2/conf-enabled/webwork.conf

# install odbc for shib sp
RUN cd /usr && \
    curl https://downloads.mariadb.com/Connectors/odbc/connector-odbc-3.1.1/mariadb-connector-odbc-3.1.1-ga-debian-x86_64.tar.gz | tar -xvz && \
    echo "[MariaDB]" > MariaDB_odbc_driver_template.ini && \
    echo "Description = MariaDB Connector/ODBC v.3.1" >> MariaDB_odbc_driver_template.ini && \
    echo "Driver = /usr/lib/libmaodbc.so" >> MariaDB_odbc_driver_template.ini && \
    odbcinst -i -d -f MariaDB_odbc_driver_template.ini

COPY docker-config/apache/shibboleth2.xml-template /etc/shibboleth/
COPY docker-config/apache/mod_shib.conf /etc/apache2/conf-enabled/
COPY docker-config/apache/000-default.conf /etc/apache2/sites-available/

EXPOSE 80
WORKDIR $APP_ROOT

# Enabling SSL is NOT done here.
# Instead it is done by docker-entrypoint.sh at container startup when SSL=1
#     is set in the environment, for example by docker-compose.yml.
#RUN a2enmod ssl && a2ensite default-ssl
#EXPOSE 443

# ==================================================================

# Phase 8 - prepare docker-entrypoint.sh
# Done near the end, so that an update to docker-entrypoint.sh can be
# done without rebuilding the earlier layers of the Docker image.

COPY docker-config/docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT ["docker-entrypoint.sh"]

# ==================================================================

# add enviroment variables to control some things during container startup

ENV SSL=0 \
    PAPERSIZE=letter \
    SYSTEM_TIMEZONE=UTC \
    ADD_LOCALES=0 \
    ADD_APT_PACKAGES=0

# ================================================

CMD ["apache2", "-DFOREGROUND"]
